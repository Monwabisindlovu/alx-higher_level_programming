# Test cases for matrix_divided function with valid inputs
>>> from 2-matrix_divided import matrix_divided

# Test with a valid matrix and divisor
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
# Expected outcome: [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test with a different matrix and divisor
>>> matrix = [[10, 20, 30], [40, 50, 60]]
>>> matrix_divided(matrix, 5)
# Expected outcome: [[2.0, 4.0, 6.0], [8.0, 10.0, 12.0]]

# Test with a matrix of floats
>>> matrix = [[1.5, 2.5], [3.0, 4.0]]
>>> matrix_divided(matrix, 2)
# Expected outcome: [[0.75, 1.25], [1.5, 2.0]]

# Test cases for invalid inputs and exceptions
# Test with a matrix with different row sizes
>>> matrix = [[1, 2, 3], [4, 5], [6, 7, 8]]
>>> matrix_divided(matrix, 2)
# Expected outcome: TypeError: Each row of the matrix must have the same size

# Test with an invalid matrix (not a list of lists)
>>> matrix = [1, 2, 3]
>>> matrix_divided(matrix, 2)
# Expected outcome: TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test with invalid divisor (not a number)
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, "divisor")
# Expected outcome: TypeError: div must be a number

# Test with divisor equal to 0
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 0)
# Expected outcome: ZeroDivisionError: division by zero

